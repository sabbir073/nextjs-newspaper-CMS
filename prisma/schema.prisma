datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model with role management
model User {
  id                    Int      @id @default(autoincrement())
  name                  String
  email                 String   @unique
  password              String   // Store bcrypt hashed password
  role                  Role     @default(USER) // Role-based access
  display_name          String?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  sessions              Session[]
  accounts              Account[]
  forget_password_token String?  // Password recovery flow
  news_created          News[]   @relation("NewsCreatedBy")
  news_updated          News[]   @relation("NewsUpdatedBy")
}

// Session model for NextAuth.js
model Session {
  id           String   @id @default(cuid())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  sessionToken String   @unique
}

// OAuth account model (optional for future integrations)
model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider           String
  providerAccountId  String   @unique
  refresh_token      String?
  access_token       String?
  expires_at         Int?
}

// Enum for role management
enum Role {
  ADMIN
  EDITOR
  USER
}

// Category model
model Category {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  news      News[]   // Implicit many-to-many relation
}

// News model
model News {
  id                 Int        @id @default(autoincrement())
  title              String
  description        String     // Markdown content using SimpleMdeReact
  highlight_text     String?
  reporter_name      String
  publish_status     PublishStatus @default(DRAFT)
  tag                String?    // Tags, comma-separated if multiple
  categories         Category[] // Implicit many-to-many relation
  featured_image     String?
  meta_title         String?
  meta_description   String?
  meta_image         String?    // Image name for SEO
  focus_keyword      String?
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt
  created_by         User       @relation("NewsCreatedBy", fields: [created_by_id], references: [id], onDelete: Cascade)
  updated_by         User       @relation("NewsUpdatedBy", fields: [updated_by_id], references: [id], onDelete: Cascade)
  created_by_id      Int
  updated_by_id      Int
}

// Enum for publish status
enum PublishStatus {
  PUBLISHED
  DRAFT
}
